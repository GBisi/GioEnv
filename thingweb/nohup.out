WoT-Servient using config file 'wot-servient.conf.json'
DefaultServient configured with
{
  servient: { clientOnly: false, staticAddress: '131.114.73.148' },
  http: { port: 2000 }
}
HttpServer starting on port 2000
WebSocketServer starting on port -1
DefaultServient started
WoTImpl producing new ExposedThing 'servient'
Servient generating ID for 'servient': 'urn:uuid:816c4fc2-2abc-4d19-9f92-25164b00112a'
Servient reset ID 'urn:uuid:816c4fc2-2abc-4d19-9f92-25164b00112a' with 'servient'
ExposedThing 'servient' setting action Handler for 'log'
ExposedThing 'servient' setting action Handler for 'shutdown'
ExposedThing 'servient' setting action Handler for 'runScript'
ExposedThing 'servient' setting read handler for 'things'
ExposedThing 'servient' exposing all Interactions and TD
Servient exposing 'servient'
HttpServer on port 2000 exposes 'servient' as unique '/servient'
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/servient/properties/things' to Property 'things'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/servient/actions/log' to Action 'log'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/servient/actions/shutdown' to Action 'shutdown'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/servient/actions/runScript' to Action 'runScript'
WebSocketServer on port 2000 exposes 'servient' as unique '/servient/*'
serializeTD() produced
```
{"title":"servient","description":"node-wot CLI Servient","properties":{"things":{"type":"object","description":"Get things","observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/servient/properties/things","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]}},"actions":{"log":{"description":"Enable logging","input":{"type":"string"},"output":{"type":"string"},"forms":[{"href":"http://131.114.73.148:2000/servient/actions/log","contentType":"application/json","op":["invokeaction"],"htv:methodName":"POST"}],"idempotent":false,"safe":false},"shutdown":{"description":"Stop servient","output":{"type":"string"},"forms":[{"href":"http://131.114.73.148:2000/servient/actions/shutdown","contentType":"application/json","op":["invokeaction"],"htv:methodName":"POST"}],"idempotent":false,"safe":false},"runScript":{"description":"Run script","input":{"type":"string"},"output":{"type":"string"},"forms":[{"href":"http://131.114.73.148:2000/servient/actions/runScript","contentType":"application/json","op":["invokeaction"],"htv:methodName":"POST"}],"idempotent":false,"safe":false}},"@context":"https://www.w3.org/2019/wot/td/v1","@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:816c4fc2-2abc-4d19-9f92-25164b00112a","forms":[{"href":"http://131.114.73.148:2000/servient/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
WoT-Servient using current directory with 1 script
WoT-Servient reading script /home/bisicchia/thesis/thingweb/test.js
WoT-Servient running script ''... (299 lines)
WoTImpl producing new ExposedThing 'puvit'
Servient generating ID for 'puvit': 'urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be'
Servient reset ID 'urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be' with 'puvit'
ExposedThing 'puvit' directly sets Property 'serial_number' to value '384933164'
ExposedThing 'puvit' directly sets Property 'temp' to value '0'
ExposedThing 'puvit' directly sets Property 'light' to value '0'
ExposedThing 'puvit' exposing all Interactions and TD
Servient exposing 'puvit'
HttpServer on port 2000 exposes 'puvit' as unique '/puvit'
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/puvit/properties/serial_number' to Property 'serial_number'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/puvit/properties/light' to Property 'light'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/puvit/properties/light/observable' to observable Property 'light'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/puvit/properties/temp' to Property 'temp'
HttpServer on port 2000 assigns 'http://131.114.73.148:2000/puvit/properties/temp/observable' to observable Property 'temp'
WebSocketServer on port 2000 exposes 'puvit' as unique '/puvit/*'
serializeTD() produced
```
{"title":"puvit","description":"A Microbit Device","descriptions":{"it":"Un Microbit"},"@context":"https://www.w3.org/2019/wot/td/v1","properties":{"serial_number":{"type":"float","description":"This Microbit's serial number","descriptions":{"it":"Numero seriale del Microbit"},"observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/serial_number","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]},"light":{"type":"number","description":"Value of this Microbit's light sensor","descriptions":{"it":"Valore del sensore di luminosita' di questo Microbit"},"observable":true,"#input":true,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/light/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}],"readOnly":false,"writeOnly":false,"#output":false},"temp":{"type":"number","description":"Value of this Microbit's temp sensor","descriptions":{"it":"Valore del sensore di temperatura di questo Microbit"},"observable":true,"#input":true,"readOnly":false,"writeOnly":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/temp/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}]}},"@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be","forms":[{"href":"http://131.114.73.148:2000/puvit/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties","writeallproperties","writemultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
parseTD() parsing
```
{"title":"puvit","description":"A Microbit Device","descriptions":{"it":"Un Microbit"},"@context":"https://www.w3.org/2019/wot/td/v1","properties":{"serial_number":{"type":"float","description":"This Microbit's serial number","descriptions":{"it":"Numero seriale del Microbit"},"observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/serial_number","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]},"light":{"type":"number","description":"Value of this Microbit's light sensor","descriptions":{"it":"Valore del sensore di luminosita' di questo Microbit"},"observable":true,"#input":true,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/light/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}],"readOnly":false,"writeOnly":false,"#output":false},"temp":{"type":"number","description":"Value of this Microbit's temp sensor","descriptions":{"it":"Valore del sensore di temperatura di questo Microbit"},"observable":true,"#input":true,"readOnly":false,"writeOnly":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/temp/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}]}},"@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be","forms":[{"href":"http://131.114.73.148:2000/puvit/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties","writeallproperties","writemultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
WoTImpl consuming TD 'urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be' to instantiate ConsumedThing 'puvit'
Helpers found scheme 'http'
ConsumedThing 'puvit' has no client in cache (-1)
Servient checking for 'http' scheme in 6 ClientFactories
Servient creating client for scheme 'http'
HttpClientFactory creating client for 'http'
ConsumedThing 'puvit' got new client for 'http'
ConsumedThing 'puvit' setting credentials for [HttpClient]
Servient looking up credentials for 'urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be'
HttpClient using security scheme 'nosec'
ConsumedThing 'puvit' updating http://131.114.73.148:2000/puvit/properties/serial_number with '4.2'
ContentSerdes serializing to application/json
HttpClient got Form 'methodName' GET
HttpClient applying form
HttpClient got Form 'contentType' application/json
HttpClient (updateResource) sending GET with 'application/json' to /puvit/properties/serial_number
Helpers found scheme 'http'
Helpers found scheme 'http'
Helpers found scheme 'http'
ConsumedThing 'puvit' chose cached client for 'http'
ConsumedThing 'puvit' updating http://131.114.73.148:2000/puvit/properties/temp with '-42'
ContentSerdes serializing to application/json
HttpClient got Form 'methodName' PATCH
HttpClient applying form
HttpClient (updateResource) sending PATCH with 'application/json' to /puvit/properties/temp
Helpers found scheme 'http'
Helpers found scheme 'http'
Helpers found scheme 'http'
ConsumedThing 'puvit' chose cached client for 'http'
ConsumedThing 'puvit' updating http://131.114.73.148:2000/puvit/properties/light with '42'
ContentSerdes serializing to application/json
HttpClient got Form 'methodName' PATCH
HttpClient applying form
HttpClient (updateResource) sending PATCH with 'application/json' to /puvit/properties/light
Helpers found scheme 'http'
ConsumedThing 'puvit' chose cached client for 'http'
ConsumedThing 'puvit' updating http://131.114.73.148:2000/puvit/properties/serial_number with '4.2'
ContentSerdes serializing to application/json
HttpClient got Form 'methodName' GET
HttpClient applying form
HttpClient got Form 'contentType' application/json
HttpClient (updateResource) sending GET with 'application/json' to /puvit/properties/serial_number
serializeTD() produced
```
{"title":"puvit","description":"A Microbit Device","descriptions":{"it":"Un Microbit"},"@context":"https://www.w3.org/2019/wot/td/v1","properties":{"serial_number":{"type":"float","description":"This Microbit's serial number","descriptions":{"it":"Numero seriale del Microbit"},"observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/serial_number","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]},"light":{"type":"number","description":"Value of this Microbit's light sensor","descriptions":{"it":"Valore del sensore di luminosita' di questo Microbit"},"observable":true,"#input":true,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/light/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}],"readOnly":false,"writeOnly":false,"#output":false},"temp":{"type":"number","description":"Value of this Microbit's temp sensor","descriptions":{"it":"Valore del sensore di temperatura di questo Microbit"},"observable":true,"#input":true,"readOnly":false,"writeOnly":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/temp/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}]}},"@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be","forms":[{"href":"http://131.114.73.148:2000/puvit/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties","writeallproperties","writemultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
serializeTD() produced
```
{"title":"puvit","description":"A Microbit Device","descriptions":{"it":"Un Microbit"},"@context":"https://www.w3.org/2019/wot/td/v1","properties":{"serial_number":{"type":"float","description":"This Microbit's serial number","descriptions":{"it":"Numero seriale del Microbit"},"observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/serial_number","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]},"light":{"type":"number","description":"Value of this Microbit's light sensor","descriptions":{"it":"Valore del sensore di luminosita' di questo Microbit"},"observable":true,"#input":true,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/light/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}],"readOnly":false,"writeOnly":false,"#output":false},"temp":{"type":"number","description":"Value of this Microbit's temp sensor","descriptions":{"it":"Valore del sensore di temperatura di questo Microbit"},"observable":true,"#input":true,"readOnly":false,"writeOnly":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/temp/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}]}},"@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be","forms":[{"href":"http://131.114.73.148:2000/puvit/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties","writeallproperties","writemultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
Microbit puvit ready!
HttpServer on port 2000 received 'GET /puvit/properties/serial_number' from [::ffff:131.114.73.148]:41800
ExposedThing 'puvit' gets internal value '384933164' for Property 'serial_number'
serializeTD() produced
```
{"title":"puvit","description":"A Microbit Device","descriptions":{"it":"Un Microbit"},"@context":"https://www.w3.org/2019/wot/td/v1","properties":{"serial_number":{"type":"float","description":"This Microbit's serial number","descriptions":{"it":"Numero seriale del Microbit"},"observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/serial_number","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]},"light":{"type":"number","description":"Value of this Microbit's light sensor","descriptions":{"it":"Valore del sensore di luminosita' di questo Microbit"},"observable":true,"#input":true,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/light/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}],"readOnly":false,"writeOnly":false,"#output":false},"temp":{"type":"number","description":"Value of this Microbit's temp sensor","descriptions":{"it":"Valore del sensore di temperatura di questo Microbit"},"observable":true,"#input":true,"readOnly":false,"writeOnly":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/temp/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}]}},"@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be","forms":[{"href":"http://131.114.73.148:2000/puvit/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties","writeallproperties","writemultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
ContentSerdes serializing to application/json
HttpServer on port 2000 replied with '200' to [::ffff:131.114.73.148]:41800
HttpServer on port 2000 received 'PATCH /puvit/properties/temp' from [::ffff:131.114.73.148]:41802
HttpServer on port 2000 completed body '-42'
ContentSerdes deserializing from application/json
ExposedThing 'puvit' directly sets Property 'temp' to value '-42'
HttpServer on port 2000 replied with '204' to [::ffff:131.114.73.148]:41802
HttpServer on port 2000 received 'PATCH /puvit/properties/light' from [::ffff:131.114.73.148]:41804
HttpServer on port 2000 completed body '42'
ContentSerdes deserializing from application/json
ExposedThing 'puvit' directly sets Property 'light' to value '42'
HttpServer on port 2000 replied with '204' to [::ffff:131.114.73.148]:41804
HttpServer on port 2000 received 'GET /puvit/properties/serial_number' from [::ffff:131.114.73.148]:41806
ExposedThing 'puvit' gets internal value '384933164' for Property 'serial_number'
serializeTD() produced
```
{"title":"puvit","description":"A Microbit Device","descriptions":{"it":"Un Microbit"},"@context":"https://www.w3.org/2019/wot/td/v1","properties":{"serial_number":{"type":"float","description":"This Microbit's serial number","descriptions":{"it":"Numero seriale del Microbit"},"observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/serial_number","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]},"light":{"type":"number","description":"Value of this Microbit's light sensor","descriptions":{"it":"Valore del sensore di luminosita' di questo Microbit"},"observable":true,"#input":true,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/light/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/light","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}],"readOnly":false,"writeOnly":false,"#output":false},"temp":{"type":"number","description":"Value of this Microbit's temp sensor","descriptions":{"it":"Valore del sensore di temperatura di questo Microbit"},"observable":true,"#input":true,"readOnly":false,"writeOnly":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["readproperty","writeproperty"]},{"href":"http://131.114.73.148:2000/puvit/properties/temp/observable","contentType":"application/json","op":["observeproperty"],"subprotocol":"longpoll"},{"href":"http://131.114.73.148:2000/puvit/properties/temp","contentType":"application/json","op":["updateproperty"],"htv:methodName":"PATCH"}]}},"@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:eab03ce2-6aab-4c4d-aeaf-3f3762c188be","forms":[{"href":"http://131.114.73.148:2000/puvit/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties","writeallproperties","writemultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
ContentSerdes serializing to application/json
HttpServer on port 2000 replied with '200' to [::ffff:131.114.73.148]:41806
HttpClient received 200 from /puvit/properties/serial_number
HttpClient received 204 from /puvit/properties/temp
HttpClient received 204 from /puvit/properties/light
HttpClient received 200 from /puvit/properties/serial_number
HttpServer on port 2000 received 'GET /' from [::ffff:131.114.237.49]:64053
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'GET /servient' from [::ffff:131.114.237.49]:64053
serializeTD() produced
```
{"title":"servient","description":"node-wot CLI Servient","properties":{"things":{"type":"object","description":"Get things","observable":false,"readOnly":true,"writeOnly":false,"#input":false,"#output":false,"forms":[{"href":"http://131.114.73.148:2000/servient/properties/things","contentType":"application/json","op":["readproperty"],"htv:methodName":"GET"}]}},"actions":{"log":{"description":"Enable logging","input":{"type":"string"},"output":{"type":"string"},"forms":[{"href":"http://131.114.73.148:2000/servient/actions/log","contentType":"application/json","op":["invokeaction"],"htv:methodName":"POST"}],"idempotent":false,"safe":false},"shutdown":{"description":"Stop servient","output":{"type":"string"},"forms":[{"href":"http://131.114.73.148:2000/servient/actions/shutdown","contentType":"application/json","op":["invokeaction"],"htv:methodName":"POST"}],"idempotent":false,"safe":false},"runScript":{"description":"Run script","input":{"type":"string"},"output":{"type":"string"},"forms":[{"href":"http://131.114.73.148:2000/servient/actions/runScript","contentType":"application/json","op":["invokeaction"],"htv:methodName":"POST"}],"idempotent":false,"safe":false}},"@context":"https://www.w3.org/2019/wot/td/v1","@type":"Thing","security":["nosec_sc"],"id":"urn:uuid:816c4fc2-2abc-4d19-9f92-25164b00112a","forms":[{"href":"http://131.114.73.148:2000/servient/all/properties","contentType":"application/json","op":["readallproperties","readmultipleproperties"]}],"securityDefinitions":{"nosec_sc":{"scheme":"nosec"}}}
```
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'POST /servient/actions/runScript' from [::ffff:131.114.237.49]:64053
HttpServer on port 2000 completed body '
const weatherapi = "http://api.weatherapi.com/v1/current.json?q=43,10&key=e5dec06056da4e81be1171342200504"

const openweathermap = "http://api.openweathermap.org/data/2.5/weather?units=metric&lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"
const openweathermap_uvi = "http://api.openweathermap.org/data/2.5/uvi?lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"

const fetch = require('node-fetch');

//https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitDevice.cpp
function getFriendlyName(serial_number){
    
    var n = Math.ceil(serial_number)
    var name_len = 5
    var code_letters = 5
    var codebook = [
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't']
    ]

    var ld = 1
    var d = code_letters
    var name = ""

    for (var i=0; i<name_len; i++){
        var h = Math.floor((n % d) / ld);
        n -= h;
        d *= code_letter,s;
        ld *= code_letters;
        name = codebook[i][h] + name
    }

    return name
}

function newMicrobit(serial){
    var t = WoT.produce({
        title: getFriendlyName(serial),
        description: "A Microbit Device",
        descriptions: {
            "it": "Un Microbit"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            serial_number: {
                type: "float",
                description: "This Microbit's serial number",
                descriptions: {
                    "it": "Numero seriale del Microbit"
                },
                observable: false,
                readOnly: true
            },
            light: {
                    type: "number",
                    description: "Value of this Microbit's light sensor",
                    descriptions: {
                        "it": "Valore del sensore di luminosita' di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                    },
            temp: {
                    type: "number",
                    description: "Value of this Microbit's temp sensor",
                    descriptions: {
                        "it": "Valore del sensore di temperatura di questo Microbit"
    ,                },
                    observable: true,
                    "#input":true
                }
            }
        });
        
        t.then((thing) => {
            // init property values
            thing.writeProperty("serial_number", serial);
            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);

            thing.expose().then(() => { console.info(`Microbit ${thing.getThingDescription().title} ready!`); });

        })
        .catch((e) => {
            console.log(e);
        });

        return t
            
}

function addParams(thing, name, thresholds, labels, description = "", descriptionIta = ""){

    thing["properties"][name] = {
        type:"number",
        description: description,
        descriptions: {
            "it": descriptionIta
        },
        observable: true,
        readOnly: true,
        "#input":true
    }

    thing["properties"][name+"L"] = {
        type:"string",
        description: description+" in levels",
        descriptions: {
            "it": descriptionIta+" in livelli"
        },
        observable: true,
        readOnly: true,
        enum:[...new Set(labels)],
    }

    handler = (thing,name) => {
        return (newValue) => {
        return new Promise((resolve, reject) =,> {
            thing.readProperty(name).then((val) => {

                value = labels[thresholds.length]

                for(var i=0; i<thresholds.length; i++){
                    if(val < thresholds[i]){
                        value = labels[i]
                        break
                    }
                }
                
                old = thing.readProperty(name+"L")
                if(value != old){
                     thing.writeProperty(name+"L", value);
                }

                thing.writeProperty("last_indoor_update", (new Date()).toISOString());

                resolve(newValue)

            });
        });
        
    }
};

    return handler

}

function getRoom(id){
    var room = {
        title: "room"+id,
        description: "A Smart Room",
        descriptions: {
            "it": "Una stanza intelligente"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            last_indoor_update: {
                    type: "string",
                    description: "Last room's sensors update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dai sensori nella stanza"
                    },
                    observable: true,
                    readOnly: true
      ,          },
                
            last_outdoor_update: {
                    type: "string",
                    description: "Last outdoor update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dei parametri esterni"
                    },
                    observable: true,
                    readOnly: true
                }
        },
        actions:{
            refresh: {
                description: "Update the parameters",
                descriptions: {
                    "it": "Aggiorna i parametri"
                },
                output: { type: "object" }
            }
        },
        events: {
            fix: {
                description: "Some action to do",
                descriptions: {
                    "it": "Qualche azione da compiere"
                }
            }
        }
    };

    handlers = {}

    handlers["temp"]=addParams(room,"temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"],"Room's temperature","Temperatura della stanza");
    handlers["light"]=addParams(room,"light",[25,80], ["LOW","MEDIUM","HIGH"],"Room's light","Luminosita' della stanza");
    handlers["time"]=addParams(room,"time",[7,13,19,22], ["NIGHT","MORNING","AFTERNOON","EVENING","NIGHT"],"Time","Orario");
    
	handlers,["outdoor_light"]=addParams(room,"outdoor_light",[25,80], ["LOW","MEDIUM","HIGH"], "Outdoor light","Luminosita' esterna")
	handlers["outdoor_temp"]=addParams(room,"outdoor_temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"], "Outdoor temperature","Temperatura esterna")
    
    return {"room":room,"handlers":handlers}
}

function newRoom(id){
    var val = getRoom(id)
    var room = val["room"]
    var handlers = val["handlers"]
    return WoT.produce(room).then((thing) => {

            Object.keys(handlers).forEach(function(key) {
                var value = handlers[key];
                thing.setPropertyWriteHandler(key, value(thing,key));
            }); 

            thing.setPropertyReadHandler("outdoor_temp", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve(data["main"]["feels_like"])
                        });
                });
            });

            thing.setPropertyReadHandler("outdoor_light", () => {
        ,        return new Promise((resolve, reject) => {
                    fetch(openweathermap_uvi)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve((data["value"]/11)*255)
                        });
                });
            });

            thing.setPropertyReadHandler("time", () => {
                return new Promise((resolve, reject) => {
                    resolve((new Date()).getHours())
                });
            });
            
            thing.setActionHandler("refresh", () => {
                return new Promise((resolve, reject) => {
                    thing.readAllProperties()
                        .then((map) => {resolve(map)})
                });
            });

            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);
            thing.writeProperty("time", (new Date()).getHours());

            thing.writeProperty("outdoor_temp", 0);
            thing.writeProperty("outdoor_light", 0);

            thing.writeProperty("last_indoor_update", 0);
            thing.writeProperty("last_outdoo,r_update", 0);

            thing.expose().then(() => { console.info(`${thing.getThingDescription().title} ready!`); });
        })
        .catch((e) => {
            console.log(e);
        });
}

newRoom(129)
/*
var microbit = newMicrobit(384933164).then((thing) => {

    var td = thing.getThingDescription();
    WoT.consume(td).then((consumed)=>{
            consumed.updateProperty("serial_number",4.2);
            consumed.updateProperty("temp",-42);
            consumed.updateProperty("light",42);
            consumed.updateProperty("serial_number",4.2);
    })

});
*/
newMicrobit(1252840479.9999999);
//newMicrobit(671265031);
//newMicrobit(20458004765.9999998);



'
ContentSerdes deserializing from text/plain
ExposedThing 'servient' has Action state of 'runScript'
ExposedThing 'servient' calls registered handler for Action 'runScript'
running script 
const weatherapi = "http://api.weatherapi.com/v1/current.json?q=43,10&key=e5dec06056da4e81be1171342200504"

const openweathermap = "http://api.openweathermap.org/data/2.5/weather?units=metric&lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"
const openweathermap_uvi = "http://api.openweathermap.org/data/2.5/uvi?lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"

const fetch = require('node-fetch');

//https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitDevice.cpp
function getFriendlyName(serial_number){
    
    var n = Math.ceil(serial_number)
    var name_len = 5
    var code_letters = 5
    var codebook = [
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't']
    ]

    var ld = 1
    var d = code_letters
    var name = ""

    for (var i=0; i<name_len; i++){
        var h = Math.floor((n % d) / ld);
        n -= h;
        d *= code_letters;
        ld *= code_letters;
        name = codebook[i][h] + name
    }

    return name
}

function newMicrobit(serial){
    var t = WoT.produce({
        title: getFriendlyName(serial),
        description: "A Microbit Device",
        descriptions: {
            "it": "Un Microbit"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            serial_number: {
                type: "float",
                description: "This Microbit's serial number",
                descriptions: {
                    "it": "Numero seriale del Microbit"
                },
                observable: false,
                readOnly: true
            },
            light: {
                    type: "number",
                    description: "Value of this Microbit's light sensor",
                    descriptions: {
                        "it": "Valore del sensore di luminosita' di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                    },
            temp: {
                    type: "number",
                    description: "Value of this Microbit's temp sensor",
                    descriptions: {
                        "it": "Valore del sensore di temperatura di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                }
            }
        });
        
        t.then((thing) => {
            // init property values
            thing.writeProperty("serial_number", serial);
            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);

            thing.expose().then(() => { console.info(`Microbit ${thing.getThingDescription().title} ready!`); });

        })
        .catch((e) => {
            console.log(e);
        });

        return t
            
}

function addParams(thing, name, thresholds, labels, description = "", descriptionIta = ""){

    thing["properties"][name] = {
        type:"number",
        description: description,
        descriptions: {
            "it": descriptionIta
        },
        observable: true,
        readOnly: true,
        "#input":true
    }

    thing["properties"][name+"L"] = {
        type:"string",
        description: description+" in levels",
        descriptions: {
            "it": descriptionIta+" in livelli"
        },
        observable: true,
        readOnly: true,
        enum:[...new Set(labels)],
    }

    handler = (thing,name) => {
        return (newValue) => {
        return new Promise((resolve, reject) => {
            thing.readProperty(name).then((val) => {

                value = labels[thresholds.length]

                for(var i=0; i<thresholds.length; i++){
                    if(val < thresholds[i]){
                        value = labels[i]
                        break
                    }
                }
                
                old = thing.readProperty(name+"L")
                if(value != old){
                     thing.writeProperty(name+"L", value);
                }

                thing.writeProperty("last_indoor_update", (new Date()).toISOString());

                resolve(newValue)

            });
        });
        
    }
};

    return handler

}

function getRoom(id){
    var room = {
        title: "room"+id,
        description: "A Smart Room",
        descriptions: {
            "it": "Una stanza intelligente"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            last_indoor_update: {
                    type: "string",
                    description: "Last room's sensors update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dai sensori nella stanza"
                    },
                    observable: true,
                    readOnly: true
                },
                
            last_outdoor_update: {
                    type: "string",
                    description: "Last outdoor update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dei parametri esterni"
                    },
                    observable: true,
                    readOnly: true
                }
        },
        actions:{
            refresh: {
                description: "Update the parameters",
                descriptions: {
                    "it": "Aggiorna i parametri"
                },
                output: { type: "object" }
            }
        },
        events: {
            fix: {
                description: "Some action to do",
                descriptions: {
                    "it": "Qualche azione da compiere"
                }
            }
        }
    };

    handlers = {}

    handlers["temp"]=addParams(room,"temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"],"Room's temperature","Temperatura della stanza");
    handlers["light"]=addParams(room,"light",[25,80], ["LOW","MEDIUM","HIGH"],"Room's light","Luminosita' della stanza");
    handlers["time"]=addParams(room,"time",[7,13,19,22], ["NIGHT","MORNING","AFTERNOON","EVENING","NIGHT"],"Time","Orario");
    
	handlers["outdoor_light"]=addParams(room,"outdoor_light",[25,80], ["LOW","MEDIUM","HIGH"], "Outdoor light","Luminosita' esterna")
	handlers["outdoor_temp"]=addParams(room,"outdoor_temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"], "Outdoor temperature","Temperatura esterna")
    
    return {"room":room,"handlers":handlers}
}

function newRoom(id){
    var val = getRoom(id)
    var room = val["room"]
    var handlers = val["handlers"]
    return WoT.produce(room).then((thing) => {

            Object.keys(handlers).forEach(function(key) {
                var value = handlers[key];
                thing.setPropertyWriteHandler(key, value(thing,key));
            }); 

            thing.setPropertyReadHandler("outdoor_temp", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve(data["main"]["feels_like"])
                        });
                });
            });

            thing.setPropertyReadHandler("outdoor_light", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap_uvi)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve((data["value"]/11)*255)
                        });
                });
            });

            thing.setPropertyReadHandler("time", () => {
                return new Promise((resolve, reject) => {
                    resolve((new Date()).getHours())
                });
            });
            
            thing.setActionHandler("refresh", () => {
                return new Promise((resolve, reject) => {
                    thing.readAllProperties()
                        .then((map) => {resolve(map)})
                });
            });

            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);
            thing.writeProperty("time", (new Date()).getHours());

            thing.writeProperty("outdoor_temp", 0);
            thing.writeProperty("outdoor_light", 0);

            thing.writeProperty("last_indoor_update", 0);
            thing.writeProperty("last_outdoor_update", 0);

            thing.expose().then(() => { console.info(`${thing.getThingDescription().title} ready!`); });
        })
        .catch((e) => {
            console.log(e);
        });
}

newRoom(129)
/*
var microbit = newMicrobit(384933164).then((thing) => {

    var td = thing.getThingDescription();
    WoT.consume(td).then((consumed)=>{
            consumed.updateProperty("serial_number",4.2);
            consumed.updateProperty("temp",-42);
            consumed.updateProperty("light",42);
            consumed.updateProperty("serial_number",4.2);
    })

});
*/
newMicrobit(1252840479.9999999);
//newMicrobit(671265031);
//newMicrobit(20458004765.9999998);




Servient caught error in 'script' and halted with script:7
const fetch = require('node-fetch');
              ^

ReferenceError: require is not defined
    at script:7:15
    at Script.runInContext (vm.js:131:20)
    at DefaultServient.Servient.runScript (/home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/servient.js:80:20)
    at /home/bisicchia/thesis/thingweb/new-thingweb/packages/cli/dist/cli-default-servient.js:121:35
    at new Promise (<anonymous>)
    at Object.<anonymous> (/home/bisicchia/thesis/thingweb/new-thingweb/packages/cli/dist/cli-default-servient.js:119:32)
    at /home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/exposed-thing.js:238:66
    at new Promise (<anonymous>)
    at Object.ExposedThing.invokeAction (/home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/exposed-thing.js:233:16)
    at IncomingMessage.<anonymous> (/home/bisicchia/thesis/thingweb/new-thingweb/packages/binding-http/dist/http-server.js:582:45)
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'GET /' from [::ffff:131.114.237.49]:64053
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'GET /' from [::ffff:131.114.237.49]:64053
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'POST /servient/actions/runScript' from [::ffff:131.114.237.49]:64053
HttpServer on port 2000 replied with '415' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'POST /servient/actions/runScript' from [::ffff:131.114.237.49]:64053
HttpServer on port 2000 completed body '
const weatherapi = "http://api.weatherapi.com/v1/current.json?q=43,10&key=e5dec06056da4e81be1171342200504"

const openweathermap = "http://api.openweathermap.org/data/2.5/weather?units=metric&lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"
const openweathermap_uvi = "http://api.openweathermap.org/data/2.5/uvi?lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"

const fetch = require('node-fetch');

//https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitDevice.cpp
function getFriendlyName(serial_number){
    
    var n = Math.ceil(serial_number)
    var name_len = 5
    var code_letters = 5
    var codebook = [
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't']
    ]

    var ld = 1
    var d = code_letters
    var name = ""

    for (var i=0; i<name_len; i++){
        var h = Math.floor((n % d) / ld);
        n -= h;
        d *= code_,letters;
        ld *= code_letters;
        name = codebook[i][h] + name
    }

    return name
}

function newMicrobit(serial){
    var t = WoT.produce({
        title: getFriendlyName(serial),
        description: "A Microbit Device",
        descriptions: {
            "it": "Un Microbit"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            serial_number: {
                type: "float",
                description: "This Microbit's serial number",
                descriptions: {
                    "it": "Numero seriale del Microbit"
                },
                observable: false,
                readOnly: true
            },
            light: {
                    type: "number",
                    description: "Value of this Microbit's light sensor",
                    descriptions: {
                        "it": "Valore del sensore di luminosita' di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                    },
            temp: {
                    type: "number",
                    description: "Value of this Microbit's temp sensor",
                    descriptions: {
                        "it": "Valore del sensore di temperatura di questo Microbit",
                    },
                    observable: true,
                    "#input":true
                }
            }
        });
        
        t.then((thing) => {
            // init property values
            thing.writeProperty("serial_number", serial);
            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);

            thing.expose().then(() => { console.info(`Microbit ${thing.getThingDescription().title} ready!`); });

        })
        .catch((e) => {
            console.log(e);
        });

        return t
            
}

function addParams(thing, name, thresholds, labels, description = "", descriptionIta = ""){

    thing["properties"][name] = {
        type:"number",
        description: description,
        descriptions: {
            "it": descriptionIta
        },
        observable: true,
        readOnly: true,
        "#input":true
    }

    thing["properties"][name+"L"] = {
        type:"string",
        description: description+" in levels",
        descriptions: {
            "it": descriptionIta+" in livelli"
        },
        observable: true,
        readOnly: true,
        enum:[...new Set(labels)],
    }

    handler = (thing,name) => {
        return (newValue) => {
        return new Promise((resolve, rej,ect) => {
            thing.readProperty(name).then((val) => {

                value = labels[thresholds.length]

                for(var i=0; i<thresholds.length; i++){
                    if(val < thresholds[i]){
                        value = labels[i]
                        break
                    }
                }
                
                old = thing.readProperty(name+"L")
                if(value != old){
                     thing.writeProperty(name+"L", value);
                }

                thing.writeProperty("last_indoor_update", (new Date()).toISOString());

                resolve(newValue)

            });
        });
        
    }
};

    return handler

}

function getRoom(id){
    var room = {
        title: "room"+id,
        description: "A Smart Room",
        descriptions: {
            "it": "Una stanza intelligente"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            last_indoor_update: {
                    type: "string",
                    description: "Last room's sensors update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dai sensori nella stanza"
                    },
                    observable: true,
                    readOnly: true
,                },
                
            last_outdoor_update: {
                    type: "string",
                    description: "Last outdoor update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dei parametri esterni"
                    },
                    observable: true,
                    readOnly: true
                }
        },
        actions:{
            refresh: {
                description: "Update the parameters",
                descriptions: {
                    "it": "Aggiorna i parametri"
                },
                output: { type: "object" }
            }
        },
        events: {
            fix: {
                description: "Some action to do",
                descriptions: {
                    "it": "Qualche azione da compiere"
                }
            }
        }
    };

    handlers = {}

    handlers["temp"]=addParams(room,"temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"],"Room's temperature","Temperatura della stanza");
    handlers["light"]=addParams(room,"light",[25,80], ["LOW","MEDIUM","HIGH"],"Room's light","Luminosita' della stanza");
    handlers["time"]=addParams(room,"time",[7,13,19,22], ["NIGHT","MORNING","AFTERNOON","EVENING","NIGHT"],"Time","Orario");
    
	ha,ndlers["outdoor_light"]=addParams(room,"outdoor_light",[25,80], ["LOW","MEDIUM","HIGH"], "Outdoor light","Luminosita' esterna")
	handlers["outdoor_temp"]=addParams(room,"outdoor_temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"], "Outdoor temperature","Temperatura esterna")
    
    return {"room":room,"handlers":handlers}
}

function newRoom(id){
    var val = getRoom(id)
    var room = val["room"]
    var handlers = val["handlers"]
    return WoT.produce(room).then((thing) => {

            Object.keys(handlers).forEach(function(key) {
                var value = handlers[key];
                thing.setPropertyWriteHandler(key, value(thing,key));
            }); 

            thing.setPropertyReadHandler("outdoor_temp", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve(data["main"]["feels_like"])
                        });
                });
            });

            thing.setPropertyReadHandler("outdoor_light", () => {
  ,              return new Promise((resolve, reject) => {
                    fetch(openweathermap_uvi)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve((data["value"]/11)*255)
                        });
                });
            });

            thing.setPropertyReadHandler("time", () => {
                return new Promise((resolve, reject) => {
                    resolve((new Date()).getHours())
                });
            });
            
            thing.setActionHandler("refresh", () => {
                return new Promise((resolve, reject) => {
                    thing.readAllProperties()
                        .then((map) => {resolve(map)})
                });
            });

            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);
            thing.writeProperty("time", (new Date()).getHours());

            thing.writeProperty("outdoor_temp", 0);
            thing.writeProperty("outdoor_light", 0);

            thing.writeProperty("last_indoor_update", 0);
            thing.writeProperty("last_,outdoor_update", 0);

            thing.expose().then(() => { console.info(`${thing.getThingDescription().title} ready!`); });
        })
        .catch((e) => {
            console.log(e);
        });
}

newRoom(129)
/*
var microbit = newMicrobit(384933164).then((thing) => {

    var td = thing.getThingDescription();
    WoT.consume(td).then((consumed)=>{
            consumed.updateProperty("serial_number",4.2);
            consumed.updateProperty("temp",-42);
            consumed.updateProperty("light",42);
            consumed.updateProperty("serial_number",4.2);
    })

});
*/
newMicrobit(1252840479.9999999);
//newMicrobit(671265031);
//newMicrobit(20458004765.9999998);



'
ContentSerdes deserializing from application/json
ExposedThing 'servient' has Action state of 'runScript'
ExposedThing 'servient' calls registered handler for Action 'runScript'
running script 
const weatherapi = "http://api.weatherapi.com/v1/current.json?q=43,10&key=e5dec06056da4e81be1171342200504"

const openweathermap = "http://api.openweathermap.org/data/2.5/weather?units=metric&lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"
const openweathermap_uvi = "http://api.openweathermap.org/data/2.5/uvi?lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"

const fetch = require('node-fetch');

//https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitDevice.cpp
function getFriendlyName(serial_number){
    
    var n = Math.ceil(serial_number)
    var name_len = 5
    var code_letters = 5
    var codebook = [
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't']
    ]

    var ld = 1
    var d = code_letters
    var name = ""

    for (var i=0; i<name_len; i++){
        var h = Math.floor((n % d) / ld);
        n -= h;
        d *= code_letters;
        ld *= code_letters;
        name = codebook[i][h] + name
    }

    return name
}

function newMicrobit(serial){
    var t = WoT.produce({
        title: getFriendlyName(serial),
        description: "A Microbit Device",
        descriptions: {
            "it": "Un Microbit"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            serial_number: {
                type: "float",
                description: "This Microbit's serial number",
                descriptions: {
                    "it": "Numero seriale del Microbit"
                },
                observable: false,
                readOnly: true
            },
            light: {
                    type: "number",
                    description: "Value of this Microbit's light sensor",
                    descriptions: {
                        "it": "Valore del sensore di luminosita' di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                    },
            temp: {
                    type: "number",
                    description: "Value of this Microbit's temp sensor",
                    descriptions: {
                        "it": "Valore del sensore di temperatura di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                }
            }
        });
        
        t.then((thing) => {
            // init property values
            thing.writeProperty("serial_number", serial);
            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);

            thing.expose().then(() => { console.info(`Microbit ${thing.getThingDescription().title} ready!`); });

        })
        .catch((e) => {
            console.log(e);
        });

        return t
            
}

function addParams(thing, name, thresholds, labels, description = "", descriptionIta = ""){

    thing["properties"][name] = {
        type:"number",
        description: description,
        descriptions: {
            "it": descriptionIta
        },
        observable: true,
        readOnly: true,
        "#input":true
    }

    thing["properties"][name+"L"] = {
        type:"string",
        description: description+" in levels",
        descriptions: {
            "it": descriptionIta+" in livelli"
        },
        observable: true,
        readOnly: true,
        enum:[...new Set(labels)],
    }

    handler = (thing,name) => {
        return (newValue) => {
        return new Promise((resolve, reject) => {
            thing.readProperty(name).then((val) => {

                value = labels[thresholds.length]

                for(var i=0; i<thresholds.length; i++){
                    if(val < thresholds[i]){
                        value = labels[i]
                        break
                    }
                }
                
                old = thing.readProperty(name+"L")
                if(value != old){
                     thing.writeProperty(name+"L", value);
                }

                thing.writeProperty("last_indoor_update", (new Date()).toISOString());

                resolve(newValue)

            });
        });
        
    }
};

    return handler

}

function getRoom(id){
    var room = {
        title: "room"+id,
        description: "A Smart Room",
        descriptions: {
            "it": "Una stanza intelligente"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            last_indoor_update: {
                    type: "string",
                    description: "Last room's sensors update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dai sensori nella stanza"
                    },
                    observable: true,
                    readOnly: true
                },
                
            last_outdoor_update: {
                    type: "string",
                    description: "Last outdoor update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dei parametri esterni"
                    },
                    observable: true,
                    readOnly: true
                }
        },
        actions:{
            refresh: {
                description: "Update the parameters",
                descriptions: {
                    "it": "Aggiorna i parametri"
                },
                output: { type: "object" }
            }
        },
        events: {
            fix: {
                description: "Some action to do",
                descriptions: {
                    "it": "Qualche azione da compiere"
                }
            }
        }
    };

    handlers = {}

    handlers["temp"]=addParams(room,"temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"],"Room's temperature","Temperatura della stanza");
    handlers["light"]=addParams(room,"light",[25,80], ["LOW","MEDIUM","HIGH"],"Room's light","Luminosita' della stanza");
    handlers["time"]=addParams(room,"time",[7,13,19,22], ["NIGHT","MORNING","AFTERNOON","EVENING","NIGHT"],"Time","Orario");
    
	handlers["outdoor_light"]=addParams(room,"outdoor_light",[25,80], ["LOW","MEDIUM","HIGH"], "Outdoor light","Luminosita' esterna")
	handlers["outdoor_temp"]=addParams(room,"outdoor_temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"], "Outdoor temperature","Temperatura esterna")
    
    return {"room":room,"handlers":handlers}
}

function newRoom(id){
    var val = getRoom(id)
    var room = val["room"]
    var handlers = val["handlers"]
    return WoT.produce(room).then((thing) => {

            Object.keys(handlers).forEach(function(key) {
                var value = handlers[key];
                thing.setPropertyWriteHandler(key, value(thing,key));
            }); 

            thing.setPropertyReadHandler("outdoor_temp", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve(data["main"]["feels_like"])
                        });
                });
            });

            thing.setPropertyReadHandler("outdoor_light", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap_uvi)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve((data["value"]/11)*255)
                        });
                });
            });

            thing.setPropertyReadHandler("time", () => {
                return new Promise((resolve, reject) => {
                    resolve((new Date()).getHours())
                });
            });
            
            thing.setActionHandler("refresh", () => {
                return new Promise((resolve, reject) => {
                    thing.readAllProperties()
                        .then((map) => {resolve(map)})
                });
            });

            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);
            thing.writeProperty("time", (new Date()).getHours());

            thing.writeProperty("outdoor_temp", 0);
            thing.writeProperty("outdoor_light", 0);

            thing.writeProperty("last_indoor_update", 0);
            thing.writeProperty("last_outdoor_update", 0);

            thing.expose().then(() => { console.info(`${thing.getThingDescription().title} ready!`); });
        })
        .catch((e) => {
            console.log(e);
        });
}

newRoom(129)
/*
var microbit = newMicrobit(384933164).then((thing) => {

    var td = thing.getThingDescription();
    WoT.consume(td).then((consumed)=>{
            consumed.updateProperty("serial_number",4.2);
            consumed.updateProperty("temp",-42);
            consumed.updateProperty("light",42);
            consumed.updateProperty("serial_number",4.2);
    })

});
*/
newMicrobit(1252840479.9999999);
//newMicrobit(671265031);
//newMicrobit(20458004765.9999998);




Servient caught error in 'script' and halted with script:7
const fetch = require('node-fetch');
              ^

ReferenceError: require is not defined
    at script:7:15
    at Script.runInContext (vm.js:131:20)
    at DefaultServient.Servient.runScript (/home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/servient.js:80:20)
    at /home/bisicchia/thesis/thingweb/new-thingweb/packages/cli/dist/cli-default-servient.js:121:35
    at new Promise (<anonymous>)
    at Object.<anonymous> (/home/bisicchia/thesis/thingweb/new-thingweb/packages/cli/dist/cli-default-servient.js:119:32)
    at /home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/exposed-thing.js:238:66
    at new Promise (<anonymous>)
    at Object.ExposedThing.invokeAction (/home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/exposed-thing.js:233:16)
    at IncomingMessage.<anonymous> (/home/bisicchia/thesis/thingweb/new-thingweb/packages/binding-http/dist/http-server.js:582:45)
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'GET /' from [::ffff:131.114.237.49]:64053
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'POST /servient/actions/runScript' from [::ffff:131.114.237.49]:64053
HttpServer on port 2000 completed body '
const weatherapi = "http://api.weatherapi.com/v1/current.json?q=43,10&key=e5dec06056da4e81be1171342200504"

const openweathermap = "http://api.openweathermap.org/data/2.5/weather?units=metric&lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"
const openweathermap_uvi = "http://api.openweathermap.org/data/2.5/uvi?lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"

const fetch = require('node-fetch');

//https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitDevice.cpp
function getFriendlyName(serial_number){
    
    var n = Math.ceil(serial_number)
    var name_len = 5
    var code_letters = 5
    var codebook = [
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't']
    ]

    var ld = 1
    var d = code_letters
    var name = ""

    for (var i=0; i<name_len; i++){
        var h = Math.floor((n % d) / ld);
        n -= h;
        d *= code_letter,s;
        ld *= code_letters;
        name = codebook[i][h] + name
    }

    return name
}

function newMicrobit(serial){
    var t = WoT.produce({
        title: getFriendlyName(serial),
        description: "A Microbit Device",
        descriptions: {
            "it": "Un Microbit"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            serial_number: {
                type: "float",
                description: "This Microbit's serial number",
                descriptions: {
                    "it": "Numero seriale del Microbit"
                },
                observable: false,
                readOnly: true
            },
            light: {
                    type: "number",
                    description: "Value of this Microbit's light sensor",
                    descriptions: {
                        "it": "Valore del sensore di luminosita' di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                    },
            temp: {
                    type: "number",
                    description: "Value of this Microbit's temp sensor",
                    descriptions: {
                        "it": "Valore del sensore di temperatura di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                }
            }
        });
        
        t.then((thing) => {
            // init property values
            thing.writeProperty("serial_number", serial);
            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);

            thing.expose().then(() => { console.info(`Microbit ${thing.getThingDescription().title} ready!`); });

        })
        .catch((e) => {
            console.log(e);
        });

        return t
            
}

function addParams(thing, name, thresholds, labels, description = "", descriptionIta = ""){

    thing["properties"][name] = {
        type:"number",
        description: description,
        descriptions: {
            "it": descriptionIta
        },
        observable: true,
        readOnly: true,
        "#input":true
    }

    thing["properties"][name+"L"] = {
        type:"string",
        description: description+" in levels",
        descriptions: {
            "it": descriptionIta+" in livelli"
        },
        observable: true,
        readOnly: true,
        enum:[...new Set(labels)],
    }

    handler = (thing,name) => {
        return (newValue) => {
        return new Promise((resolve, reject) =,> {
            thing.readProperty(name).then((val) => {

                value = labels[thresholds.length]

                for(var i=0; i<thresholds.length; i++){
                    if(val < thresholds[i]){
                        value = labels[i]
                        break
                    }
                }
                
                old = thing.readProperty(name+"L")
                if(value != old){
                     thing.writeProperty(name+"L", value);
                }

                thing.writeProperty("last_indoor_update", (new Date()).toISOString());

                resolve(newValue)

            });
        });
        
    }
};

    return handler

}

function getRoom(id){
    var room = {
        title: "room"+id,
        description: "A Smart Room",
        descriptions: {
            "it": "Una stanza intelligente"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            last_indoor_update: {
                    type: "string",
                    description: "Last room's sensors update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dai sensori nella stanza"
                    },
                    observable: true,
                    readOnly: true
                },
                
            last_outdoor_update: {
                    type: "string",
                    description: "Last outdoor update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dei parametri esterni"
                    },
                    observable: true,
                    readOnly: true
                }
        },
        actions:{
            refresh: {
                description: "Update the parameters",
                descriptions: {
                    "it": "Aggiorna i parametri"
                },
                output: { type: "object" }
            }
        },
        events: {
            fix: {
                description: "Some action to do",
                descriptions: {
                    "it": "Qualche azione da compiere"
                }
            }
        }
    };

    handlers = {}

    handlers["temp"]=addParams(room,"temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"],"Room's temperature","Temperatura della stanza");
    handlers["light"]=addParams(room,"light",[25,80], ["LOW","MEDIUM","HIGH"],"Room's light","Luminosita' della stanza");
    handlers["time"]=addParams(room,"time",[7,13,19,22], ["NIGHT","MORNING","AFTERNOON","EVENING","NIGHT"],"Time","Orario");
    
	handlers,["outdoor_light"]=addParams(room,"outdoor_light",[25,80], ["LOW","MEDIUM","HIGH"], "Outdoor light","Luminosita' esterna")
	handlers["outdoor_temp"]=addParams(room,"outdoor_temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"], "Outdoor temperature","Temperatura esterna")
    
    return {"room":room,"handlers":handlers}
}

function newRoom(id){
    var val = getRoom(id)
    var room = val["room"]
    var handlers = val["handlers"]
    return WoT.produce(room).then((thing) => {

            Object.keys(handlers).forEach(function(key) {
                var value = handlers[key];
                thing.setPropertyWriteHandler(key, value(thing,key));
            }); 

            thing.setPropertyReadHandler("outdoor_temp", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve(data["main"]["feels_like"])
                        });
                });
            });

            thing.setPropertyReadHandler("outdoor_light", () => {
        ,        return new Promise((resolve, reject) => {
                    fetch(openweathermap_uvi)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve((data["value"]/11)*255)
                        });
                });
            });

            thing.setPropertyReadHandler("time", () => {
                return new Promise((resolve, reject) => {
                    resolve((new Date()).getHours())
                });
            });
            
            thing.setActionHandler("refresh", () => {
                return new Promise((resolve, reject) => {
                    thing.readAllProperties()
                        .then((map) => {resolve(map)})
                });
            });

            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);
            thing.writeProperty("time", (new Date()).getHours());

            thing.writeProperty("outdoor_temp", 0);
            thing.writeProperty("outdoor_light", 0);

            thing.writeProperty("last_indoor_update", 0);
            thing.writeProperty("last_outdoo,r_update", 0);

            thing.expose().then(() => { console.info(`${thing.getThingDescription().title} ready!`); });
        })
        .catch((e) => {
            console.log(e);
        });
}

newRoom(129)
/*
var microbit = newMicrobit(384933164).then((thing) => {

    var td = thing.getThingDescription();
    WoT.consume(td).then((consumed)=>{
            consumed.updateProperty("serial_number",4.2);
            consumed.updateProperty("temp",-42);
            consumed.updateProperty("light",42);
            consumed.updateProperty("serial_number",4.2);
    })

});
*/
newMicrobit(1252840479.9999999);
//newMicrobit(671265031);
//newMicrobit(20458004765.9999998);



'
ContentSerdes deserializing from text/plain
ExposedThing 'servient' has Action state of 'runScript'
ExposedThing 'servient' calls registered handler for Action 'runScript'
running script 
const weatherapi = "http://api.weatherapi.com/v1/current.json?q=43,10&key=e5dec06056da4e81be1171342200504"

const openweathermap = "http://api.openweathermap.org/data/2.5/weather?units=metric&lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"
const openweathermap_uvi = "http://api.openweathermap.org/data/2.5/uvi?lat=43&lon=10&appid=647aa595e78b34e517dad92e1cf5e65c"

const fetch = require('node-fetch');

//https://github.com/lancaster-university/microbit-dal/blob/master/source/core/MicroBitDevice.cpp
function getFriendlyName(serial_number){
    
    var n = Math.ceil(serial_number)
    var name_len = 5
    var code_letters = 5
    var codebook = [
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't'],
        ['u', 'o', 'i', 'e', 'a'],
        ['z', 'v', 'g', 'p', 't']
    ]

    var ld = 1
    var d = code_letters
    var name = ""

    for (var i=0; i<name_len; i++){
        var h = Math.floor((n % d) / ld);
        n -= h;
        d *= code_letters;
        ld *= code_letters;
        name = codebook[i][h] + name
    }

    return name
}

function newMicrobit(serial){
    var t = WoT.produce({
        title: getFriendlyName(serial),
        description: "A Microbit Device",
        descriptions: {
            "it": "Un Microbit"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            serial_number: {
                type: "float",
                description: "This Microbit's serial number",
                descriptions: {
                    "it": "Numero seriale del Microbit"
                },
                observable: false,
                readOnly: true
            },
            light: {
                    type: "number",
                    description: "Value of this Microbit's light sensor",
                    descriptions: {
                        "it": "Valore del sensore di luminosita' di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                    },
            temp: {
                    type: "number",
                    description: "Value of this Microbit's temp sensor",
                    descriptions: {
                        "it": "Valore del sensore di temperatura di questo Microbit"
                    },
                    observable: true,
                    "#input":true
                }
            }
        });
        
        t.then((thing) => {
            // init property values
            thing.writeProperty("serial_number", serial);
            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);

            thing.expose().then(() => { console.info(`Microbit ${thing.getThingDescription().title} ready!`); });

        })
        .catch((e) => {
            console.log(e);
        });

        return t
            
}

function addParams(thing, name, thresholds, labels, description = "", descriptionIta = ""){

    thing["properties"][name] = {
        type:"number",
        description: description,
        descriptions: {
            "it": descriptionIta
        },
        observable: true,
        readOnly: true,
        "#input":true
    }

    thing["properties"][name+"L"] = {
        type:"string",
        description: description+" in levels",
        descriptions: {
            "it": descriptionIta+" in livelli"
        },
        observable: true,
        readOnly: true,
        enum:[...new Set(labels)],
    }

    handler = (thing,name) => {
        return (newValue) => {
        return new Promise((resolve, reject) => {
            thing.readProperty(name).then((val) => {

                value = labels[thresholds.length]

                for(var i=0; i<thresholds.length; i++){
                    if(val < thresholds[i]){
                        value = labels[i]
                        break
                    }
                }
                
                old = thing.readProperty(name+"L")
                if(value != old){
                     thing.writeProperty(name+"L", value);
                }

                thing.writeProperty("last_indoor_update", (new Date()).toISOString());

                resolve(newValue)

            });
        });
        
    }
};

    return handler

}

function getRoom(id){
    var room = {
        title: "room"+id,
        description: "A Smart Room",
        descriptions: {
            "it": "Una stanza intelligente"
        },
        "@context": "https://www.w3.org/2019/wot/td/v1",
        properties: {
            last_indoor_update: {
                    type: "string",
                    description: "Last room's sensors update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dai sensori nella stanza"
                    },
                    observable: true,
                    readOnly: true
                },
                
            last_outdoor_update: {
                    type: "string",
                    description: "Last outdoor update",
                    descriptions: {
                        "it": "Ultimo aggiornamento dei parametri esterni"
                    },
                    observable: true,
                    readOnly: true
                }
        },
        actions:{
            refresh: {
                description: "Update the parameters",
                descriptions: {
                    "it": "Aggiorna i parametri"
                },
                output: { type: "object" }
            }
        },
        events: {
            fix: {
                description: "Some action to do",
                descriptions: {
                    "it": "Qualche azione da compiere"
                }
            }
        }
    };

    handlers = {}

    handlers["temp"]=addParams(room,"temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"],"Room's temperature","Temperatura della stanza");
    handlers["light"]=addParams(room,"light",[25,80], ["LOW","MEDIUM","HIGH"],"Room's light","Luminosita' della stanza");
    handlers["time"]=addParams(room,"time",[7,13,19,22], ["NIGHT","MORNING","AFTERNOON","EVENING","NIGHT"],"Time","Orario");
    
	handlers["outdoor_light"]=addParams(room,"outdoor_light",[25,80], ["LOW","MEDIUM","HIGH"], "Outdoor light","Luminosita' esterna")
	handlers["outdoor_temp"]=addParams(room,"outdoor_temp",[18,20,22,24], ["VERY_LOW","LOW","MEDIUM","HIGH","VERY_HIGH"], "Outdoor temperature","Temperatura esterna")
    
    return {"room":room,"handlers":handlers}
}

function newRoom(id){
    var val = getRoom(id)
    var room = val["room"]
    var handlers = val["handlers"]
    return WoT.produce(room).then((thing) => {

            Object.keys(handlers).forEach(function(key) {
                var value = handlers[key];
                thing.setPropertyWriteHandler(key, value(thing,key));
            }); 

            thing.setPropertyReadHandler("outdoor_temp", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve(data["main"]["feels_like"])
                        });
                });
            });

            thing.setPropertyReadHandler("outdoor_light", () => {
                return new Promise((resolve, reject) => {
                    fetch(openweathermap_uvi)
                        .then((response) => {
                            return response.json();
                        })
                        .then((data) => {
                            thing.writeProperty("last_outdoor_update", (new Date()).toISOString());
                            resolve((data["value"]/11)*255)
                        });
                });
            });

            thing.setPropertyReadHandler("time", () => {
                return new Promise((resolve, reject) => {
                    resolve((new Date()).getHours())
                });
            });
            
            thing.setActionHandler("refresh", () => {
                return new Promise((resolve, reject) => {
                    thing.readAllProperties()
                        .then((map) => {resolve(map)})
                });
            });

            thing.writeProperty("temp", 0);
            thing.writeProperty("light", 0);
            thing.writeProperty("time", (new Date()).getHours());

            thing.writeProperty("outdoor_temp", 0);
            thing.writeProperty("outdoor_light", 0);

            thing.writeProperty("last_indoor_update", 0);
            thing.writeProperty("last_outdoor_update", 0);

            thing.expose().then(() => { console.info(`${thing.getThingDescription().title} ready!`); });
        })
        .catch((e) => {
            console.log(e);
        });
}

newRoom(129)
/*
var microbit = newMicrobit(384933164).then((thing) => {

    var td = thing.getThingDescription();
    WoT.consume(td).then((consumed)=>{
            consumed.updateProperty("serial_number",4.2);
            consumed.updateProperty("temp",-42);
            consumed.updateProperty("light",42);
            consumed.updateProperty("serial_number",4.2);
    })

});
*/
newMicrobit(1252840479.9999999);
//newMicrobit(671265031);
//newMicrobit(20458004765.9999998);




Servient caught error in 'script' and halted with script:7
const fetch = require('node-fetch');
              ^

ReferenceError: require is not defined
    at script:7:15
    at Script.runInContext (vm.js:131:20)
    at DefaultServient.Servient.runScript (/home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/servient.js:80:20)
    at /home/bisicchia/thesis/thingweb/new-thingweb/packages/cli/dist/cli-default-servient.js:121:35
    at new Promise (<anonymous>)
    at Object.<anonymous> (/home/bisicchia/thesis/thingweb/new-thingweb/packages/cli/dist/cli-default-servient.js:119:32)
    at /home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/exposed-thing.js:238:66
    at new Promise (<anonymous>)
    at Object.ExposedThing.invokeAction (/home/bisicchia/thesis/thingweb/new-thingweb/packages/core/dist/exposed-thing.js:233:16)
    at IncomingMessage.<anonymous> (/home/bisicchia/thesis/thingweb/new-thingweb/packages/binding-http/dist/http-server.js:582:45)
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
HttpServer on port 2000 received 'GET /' from [::ffff:131.114.237.49]:64053
AddressHelper uses static 131.114.73.148
HttpServer on port 2000 replied with '200' to [::ffff:131.114.237.49]:64053
